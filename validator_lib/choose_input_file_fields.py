"""
Class to create a screen listing every file in the input folder with potential fields as fill in boxes or checkboxes.
Records the user's choices to the config file as defined in the ValidatorData class.
"""

from termcolor import cprint, colored
import re
import os
import sys

from yaml import warnings

from validator_lib.validator_config import ValidatorConfig
from validator_lib.terminal_gui_utilities import print_terminal_page_header


class InputFields:
    marc_cats = ["oclc", "583", "bib_id", "holdings_id", "863", "866", "holdings_1", "holdings_2"]
    spreadsheet_cats = [
        "header", "oclc", "bib_id", "holdings_id", "institution", "oclc_symbol", "location", "issn", "title", 
        "holdings_0", "holdings_1", "holdings_2", "holdings_3"]
    cat_labels = {
            "header": "Has header row",
            "oclc": "OCLC",
            "bib_id": "Bib no",
            "holdings_id": "Holdings ID",
            "issn": "ISSN",
            "title": "Title",
            "863": "Holdings in 863/864/865",
            "866": "Holdings in 866/867/868",
            "holdings_0": "Holdings field",
            "holdings_1": "Other holdings field",
            "holdings_2": "Other holdings field",
            "holdings_3": "Other holdings field",
            "institution": "Institution",
            "oclc_symbol": "OCLC symbol",
            "location": "Location",
            "583": "File has 583s"
        }
    spreadsheet_file_endings = [".txt", ".csv", ".tsv", ".xlsx", ".xls"]


class InputFieldsChooser:

    marc_instructions = colored('Enter MARC fields/subfields like "001" or "904a".', 'green')
    spreadsheet_instructions = colored('Enter columns by number, starting with 1.', 'green')

    def __init__(self, input_files):
        self.validator_config = ValidatorConfig()
        self.fields = {}
        self.all_input_files = input_files
        self.warnings = None
        self.marc_cats = InputFields.marc_cats.copy()
        self.spreadsheet_cats = InputFields.spreadsheet_cats.copy()
        self.cat_labels = InputFields.cat_labels.copy()
        self.checkbox_cats = {"header", "863", "866", "583"}
        self.spreadsheet_file_endings = InputFields.spreadsheet_file_endings.copy()

        self.warnings = []
        self.fields = {}

        instructions_text = 'Leave unused fields blank.\n'
        instructions_text += 'Leave all fields blank to skip a title.'

        self.make_gui()

    def make_gui(self):
        while True:
            print_terminal_page_header('Choose Input File Fields')

            file_number = 0
            for input_file in self.all_input_files:
                file_number += 1
                number_color = 'yellow'
                if '_AUTOGENERATED_FILE' in input_file:
                    number_color = 'red'
                print('{}. {}'.format(colored(str(file_number), number_color), input_file))

            print('')
            cprint('What would you like to do?', 'cyan')
            print('Enter a {} to set input fields for that file.'.format(colored('number', 'yellow')))
            print('{}. Return to the main menu.'.format(colored('m', 'yellow')))
            print('{}. Quit the Validator.'.format(colored('q', 'yellow')))
            user_choice = input('')

            if user_choice.lower().startswith('m'):
                break
            elif user_choice.lower().startswith('q'):
                sys.exit()
            elif user_choice.isdigit():
                try:
                    wanted_file = self.all_input_files[int(user_choice)-1]
                    if wanted_file.lower().endswith('mrk') or wanted_file.lower().endswith('mrc'):
                        self.get_file_fields(wanted_file, self.marc_cats)
                    else:
                        self.get_file_fields(wanted_file, self.spreadsheet_cats)
                except IndexError:
                    pass
            os.system('cls' if os.name == 'nt' else 'clear')

    @staticmethod
    def get_input_file_header(input_file):
        header_list = []
        header_list.append('Selecting fields for {}'.format(colored(input_file, 'cyan')))
        bar = '~~~~~~~~~~~~~~~~~~~~~'
        for _ in range(0, len(input_file)):
            bar += '~'
        header_list.append(colored(bar, 'yellow'))
        return '\n'.join(header_list)


    def get_file_fields(self, input_file, input_cats):

        if input_file not in self.validator_config.config:
            self.validator_config.config[input_file] = {}

        input_file_header = self.get_input_file_header(input_file)
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')
            cat_body_list = [input_file_header]
            cat_number = 0
            for cat in input_cats:
                cat_number += 1
                cat_data = self.get_category_data(cat, input_file)
                print_number = '{}. '.format(colored(str(cat_number), 'yellow'))
                if cat_number < 10:
                    print_number += ' '
                cat_body_list.append('{}{} {}'.format(print_number, self.cat_labels[cat].ljust(30), cat_data))

            cat_body_list.append('')
            print('\n'.join(cat_body_list))

            cprint('What would you like to do?', 'cyan')
            print('Enter the {} of a {}/{} field to toggle its value.'.format(
                colored('number', 'yellow'),
                colored('yes', 'blue'),
                colored('no', 'red')))
            print('Enter the {} of another field to add, delete, or alter a value.'.format(colored('number', 'yellow')))
            print('{}. Return to the previous menu.'.format(colored('m', 'yellow')))
            print('{}. Quit the Validator.'.format(colored('q', 'yellow')))

            user_choice = input('')

            if user_choice.lower().startswith('m'):
                break
            elif user_choice.lower().startswith('q'):
                sys.exit()
            elif user_choice.isdigit() and int(user_choice) > 0 and int(user_choice) <= cat_number:
                cat_to_change = input_cats[int(user_choice)-1]
                if cat_to_change in self.checkbox_cats:
                    if cat_to_change in self.validator_config.config[input_file] and self.validator_config.config[input_file][cat_to_change] == '1':
                        self.validator_config.config[input_file].pop(cat_to_change)
                    else:
                        self.validator_config.config[input_file][cat_to_change] = '1'
                else:
                    self.get_freetext_field_data(cat_to_change, input_file, cat_body_list)
    
    def get_freetext_field_data(self, cat_to_change, input_file, cat_body_list):
        os.system('cls' if os.name == 'nt' else 'clear')
        print('\n'.join(cat_body_list))
        print('Altering field {}.'.format(colored(self.cat_labels[cat_to_change]), 'cyan'))
        bar = '~~~~~~~~~~~~~~~~'
        for _ in range(0, len(cat_to_change)):
            bar += '~'
        cprint(bar, 'yellow')
        cprint('What would you like to do?', 'cyan')
        print('{}. Enter a new value.'.format(colored('n', 'yellow')))
        print('{}. Clear the field\'s value.'.format(colored('c', 'yellow')))
        print('Press {} to cancel and not make any changes.'.format(colored('Enter', 'yellow')))
        user_choice = input(colored('Your choice: ', 'cyan'))
        if user_choice.lower().startswith('n'):
            if input_file.lower().endswith('mrk') or input_file.lower().endswith('mrc'):
                print(self.marc_instructions)
            else:
                print(self.spreadsheet_instructions)
            new_value = input(colored('Enter new value: ', 'cyan'))
            checked_new_value = self.basic_field_validation(input_file, cat_to_change, new_value)
            if checked_new_value:
                self.validator_config.config[input_file][cat_to_change] = checked_new_value 
        elif user_choice.lower().startswith('c'):
            try:
                self.validator_config.config[input_file].pop(cat_to_change)
            except KeyError:
                pass
        self.validator_config.write_validator_config_file()

    def get_category_data(self, cat, input_file):
        """See if the input is in our config list, and insert preset values if so."""
        blank_return = colored('---', 'cyan')
        yes_return = colored('yes', 'white', 'on_blue')
        no_return = colored('no', 'white', 'on_red')
        if cat in self.checkbox_cats:
            if cat in self.validator_config.config[input_file]:
                if self.validator_config.config[input_file][cat] == '1':
                    return yes_return
            return no_return
        elif cat not in self.validator_config.config[input_file]:
            return blank_return
        elif not self.validator_config.config[input_file][cat]:
            return blank_return
        else:
            return colored(self.validator_config.config[input_file][cat], 'cyan')

    def basic_field_validation(self, input_file, field_name, field_data):
        field_data = field_data.strip()
        field = field_data[:3]
        subfield = field_data[3:]
        field_validation_warning = ''
        if not field_data:
            field_validation_warning = 'Nothing entered.'
        elif not input_file.lower().endswith('mrk') and not input_file.lower().endswith('mrc'):
            # Spreadsheets
            if not field_data.isdigit():
                field_validation_warning ='Field data {} is invalid. Input must be a digit.'.format(field_data)
        else:
            # MARC files
            if len(field_data) < 3 or len(field_data) > 4:
                field_validation_warning = "Input {} is invalid length.".format(field_data)
            elif subfield and not re.search(r'\w', subfield):
                field_validation_warning = 'Input {} includes invalid subfield {}.'.format(field_data, subfield)
            elif field.lower() == 'ldr':
                pass
            elif not field.isdigit():
                field_validation_warning = '{} is not valid MARC field'.format(field)
            elif int(field) > 10 and int(field) != 35 and not subfield:
                field_validation_warning = 'Input field {} must include subfield.'.format(field)
        if field_validation_warning:
            print('{} {}'.format(colored('INVALID ENTRY:', 'white', 'on_red'), field_validation_warning))
            input(colored('Type Enter to continue.', 'red'))
            return ''
        else:
            return field_data

    @staticmethod
    def print_marc_invalid_field_warning(field_data):
        cprint('WARNING: invalid field.', 'white', 'on_red')
